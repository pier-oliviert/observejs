// Generated by CoffeeScript 1.6.3
(function() {
  var God,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  God = (function() {
    function God() {
      this.modelExists = __bind(this.modelExists, this);
      this.destroy = __bind(this.destroy, this);
      this.create = __bind(this.create, this);
      this.update = __bind(this.update, this);
    }

    God.prototype.update = function(el) {
      var model;
      model = el.getAttribute(Shiny.attributeName);
      if (model != null) {
        return this.create(el, model);
      } else {
        return this.destroy(el);
      }
    };

    God.prototype.create = function(el) {
      var model;
      model = el.getAttribute(Shiny.attributeName);
      if (this.modelExists(model)) {
        el.instance = new Shiny.Models.klass[model](el);
        el.instance.element = function() {
          return el;
        };
        el.instance.on = function(event, target, callback) {
          if (callback != null) {
            el.instance.on.events.push([event, target, callback]);
          } else {
            callback = target;
            target = el;
          }
          return target.addEventListener(event, callback);
        };
        el.instance.on.events = [];
        if (el.instance.loaded != null) {
          return el.instance.loaded();
        }
      } else {
        throw "error: " + model + " is not registered. Add your model with Shiny.Models.add(" + model + ")";
      }
    };

    God.prototype.destroy = function(el) {
      var _ref;
      return (_ref = el.instance.on.events) != null ? _ref.forEach(function(event) {
        return event[1].removeEventListener(event[0], event[2]);
      }) : void 0;
    };

    God.prototype.modelExists = function(name) {
      return Shiny.Models.klass[name] != null;
    };

    return God;

  })();

  Shiny.God = new God;

}).call(this);
