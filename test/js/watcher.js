// Generated by CoffeeScript 1.6.3
(function() {
  var Watcher, instance,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  instance = void 0;

  Watcher = (function() {
    function Watcher(target, config) {
      if (config == null) {
        config = {};
      }
      this.destroy = __bind(this.destroy, this);
      this.add = __bind(this.add, this);
      this.observed = __bind(this.observed, this);
      this.observer = new MutationObserver(this.observed);
      this.observer.observe(target, config);
    }

    Watcher.prototype.observed = function(mutations) {
      var _this = this;
      return mutations.forEach(function(mutation) {
        if (mutation.type === 'attributes') {
          return Shiny.God.update(target);
        } else {
          _this.add(mutation.addedNodes);
          return _this.destroy(mutation.removedNodes);
        }
      });
    };

    Watcher.prototype.add = function(nodes) {
      var child, node, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = nodes.length; _i < _len; _i++) {
        node = nodes[_i];
        if (!Shiny.isDOM(node)) {
          continue;
        }
        if (node.hasAttribute(Shiny.attributeName)) {
          Shiny.God.create(node, node.getAttribute(Shiny.attributeName));
        }
        _results.push((function() {
          var _j, _len1, _ref, _results1;
          _ref = node.querySelectorAll("[" + Shiny.attributeName + "]");
          _results1 = [];
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            child = _ref[_j];
            _results1.push(Shiny.God.create(child, child.getAttribute(Shiny.attributeName)));
          }
          return _results1;
        })());
      }
      return _results;
    };

    Watcher.prototype.destroy = function(nodes) {
      var child, node, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = nodes.length; _i < _len; _i++) {
        node = nodes[_i];
        if (!Shiny.isDOM(node)) {
          continue;
        }
        if (node.hasAttribute(Shiny.attributeName)) {
          Shiny.God.destroy(node);
        }
        _results.push((function() {
          var _j, _len1, _ref, _results1;
          _ref = node.querySelectorAll("[" + Shiny.attributeName + "]");
          _results1 = [];
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            child = _ref[_j];
            _results1.push(Shiny.God.destroy(child));
          }
          return _results1;
        })());
      }
      return _results;
    };

    Watcher.prototype.inspect = function(node) {
      var el, found, _i, _len, _results;
      if (Shiny.isDOM(node)) {
        found = node.querySelectorAll("[" + Shiny.attributeName + "]");
        _results = [];
        for (_i = 0, _len = found.length; _i < _len; _i++) {
          el = found[_i];
          _results.push(Shiny.God.create(el));
        }
        return _results;
      }
    };

    return Watcher;

  })();

  Shiny.Watcher = function() {
    var i, target;
    if (instance == null) {
      i = 0;
      target = null;
      target = Shiny.isDOM(arguments[i]) ? arguments[i++] : document;
      instance = new Watcher(target, arguments[i]);
    }
    return instance;
  };

}).call(this);
